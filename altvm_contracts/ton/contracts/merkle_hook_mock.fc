#include "imports/stdlib.fc";
#include "imports/ton_msg.fc";
#include "imports/op_codes.fc";
#include "imports/events.fc";
#include "imports/errors.fc";
#include "imports/signing_utils.fc";

global int g::index;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_uint(g::index, 32)
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::index = ds~load_uint(32);
}

() post_dispatch(slice s, int query_id, int value, slice dest) impure inline {
    slice body = s;
    slice hyp_message = s~load_ref_slice();
    cell hook_metadata = s~load_maybe_ref();
    int message_id = message_id(hyp_message);

    builder data = begin_cell().store_uint(message_id, 256).store_uint(g::index, 32);
    send_event(
        event::inserted_into_tree,
        data
    );

    g::index += 1;

    reserve_and_send_remaining(
        op::hook::post_dispatch,
        query_id,
        value,
        0,
        dest,
        body
    );
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::hook::post_dispatch) {
        post_dispatch(
            in_msg_body,
            query_id,
            msg_value,
            msg_sender
        );
        return store_globals();
    }

    throw(error::unknown_op);
}


int get_count() method_id { 
    load_globals();
    return g::index + 1;
}

(int, int) get_latest_checkpoint() method_id {
    load_globals();
    return (0, g::index);
}