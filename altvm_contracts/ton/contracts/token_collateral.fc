#include "imports/stdlib.fc";
#include "imports/op_codes.fc";
#include "jetton/op-codes.fc";
#include "imports/errors.fc";
#include "imports/send_mode.fc";
#include "imports/ton_msg.fc";
#include "imports/events.fc";

;; Optional ISM address. Can be addr_none$00 or addr_std$10 ...
global slice g::ism_addr;
global slice g::jetton_addr;
global slice g::mailbox_addr;

() store_globals() impure inline_ref {
    cell data = begin_cell()
        .store_slice(g::ism_addr)
        .store_slice(g::jetton_addr)
        .store_slice(g::mailbox_addr)
        .end_cell();
    set_data(data);
}

() load_globals() impure inline_ref {
    slice ds = get_data().begin_parse();
    g::ism_addr = ds~load_msg_addr();
    g::jetton_addr = ds~load_msg_addr();
    g::mailbox_addr = ds~load_msg_addr();
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if ( in_msg_body.slice_empty?() ) { ;; accept simple transfer
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if ( flags & 1 ) { ;; ignore all bounced messages
        return ();
    }

    slice msg_sender = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    load_globals();

    if (op == op::get_ism) {
        cell body = begin_cell()
            .store_uint(op::process, 32)
            .store_uint(query_id, 64)
            .store_uint(op::process::verify, 32)
            .store_slice(g::ism_addr)
            .store_slice(in_msg_body)
            .end_cell();
        
        builder msg = build_message(msg_sender, 0, true, null(), body);
        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        return store_globals();
    }

    if(op == op::burn_notification) {
        int ammount = in_msg_body~load_coins();
        slice sender = in_msg_body~load_msg_addr();
        slice payload = in_msg_body~load_ref().begin_parse();

        int dest_domain = payload~load_uint(32);
        int recipient_addr = payload~load_uint(256);
        cell message = payload~load_ref();
        cell hook_metadata = payload~load_ref();

        cell dispatch_body = begin_cell()
            .store_uint(op::dispatch, 32)
            .store_uint(query_id, 64)
            .store_uint(op::dispatch::init, 32)
            .store_uint(dest_domain, 32)
            .store_uint(recipient_addr, 256)
            .store_ref(message)
            .store_maybe_ref(hook_metadata)
            .end_cell();

        builder msg = build_message(
            g::mailbox_addr,
            0,
            true,
            null(),
            dispatch_body
        );

        send_raw_message(msg.end_cell(), send_mode::carry_remaining_value);
        return ();
    }

    if (op == op::handle) {
        throw_unless(
          error::unauthorized_sender, 
          equal_slices(msg_sender, g::mailbox_addr)
        );
        int origin_domain = in_msg_body~load_uint(32);
        int sender = in_msg_body~load_uint(256);
        slice message_body = in_msg_body~load_ref().begin_parse();
        slice recipient_addr = build_addr(0, message_body~load_uint(256));
        int amount = message_body~load_uint(128);

        cell wallet_body = begin_cell()
            .store_uint(op::internal_transfer, 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .store_slice(my_address())
            .store_slice(msg_sender)
            .store_coins(0)
            .store_uint(0, 1)
        .end_cell();

        cell mint_body = begin_cell()
            .store_uint(op::mint, 32)
            .store_uint(query_id, 64)
            .store_slice(recipient_addr)
            .store_coins(0)
            .store_ref(wallet_body)
        .end_cell();

        builder mint_msg = build_message(
            g::jetton_addr,
            0,
            true,
            null(),
            mint_body
        );

        send_raw_message(mint_msg.end_cell(), send_mode::carry_remaining_value);

        builder data = begin_cell()
            .store_uint(origin_domain, 32)
            .store_slice(recipient_addr)
            .store_coins(amount);

        send_event(event::token_transfer, data);
        return store_globals();
    }
    throw(error::unknown_op);
}

slice get_ism() method_id {
    load_globals();
    return g::ism_addr;
}
